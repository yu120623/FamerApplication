package com.egceo.app.myfarm.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.egceo.app.myfarm.entity.Code;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CODE".
*/
public class CodeDao extends AbstractDao<Code, Long> {

    public static final String TABLENAME = "CODE";

    /**
     * Properties of entity Code.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CodeId = new Property(0, Long.class, "codeId", true, "CODE_ID");
        public final static Property CodeName = new Property(1, String.class, "codeName", false, "CODE_NAME");
        public final static Property CodeDesc = new Property(2, String.class, "codeDesc", false, "CODE_DESC");
        public final static Property Codetype = new Property(3, String.class, "codetype", false, "CODETYPE");
        public final static Property CreatedBy = new Property(4, String.class, "createdBy", false, "CREATED_BY");
        public final static Property UpdatedBy = new Property(5, String.class, "updatedBy", false, "UPDATED_BY");
        public final static Property UpdatedTime = new Property(6, java.util.Date.class, "updatedTime", false, "UPDATED_TIME");
        public final static Property CreatedTime = new Property(7, java.util.Date.class, "createdTime", false, "CREATED_TIME");
        public final static Property IsCurrent = new Property(8, Boolean.class, "isCurrent", false, "IS_CURRENT");
    };


    public CodeDao(DaoConfig config) {
        super(config);
    }
    
    public CodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CODE\" (" + //
                "\"CODE_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: codeId
                "\"CODE_NAME\" TEXT," + // 1: codeName
                "\"CODE_DESC\" TEXT," + // 2: codeDesc
                "\"CODETYPE\" TEXT," + // 3: codetype
                "\"CREATED_BY\" TEXT," + // 4: createdBy
                "\"UPDATED_BY\" TEXT," + // 5: updatedBy
                "\"UPDATED_TIME\" INTEGER," + // 6: updatedTime
                "\"CREATED_TIME\" INTEGER," + // 7: createdTime
                "\"IS_CURRENT\" INTEGER);"); // 8: isCurrent
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CODE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Code entity) {
        stmt.clearBindings();
 
        Long codeId = entity.getCodeId();
        if (codeId != null) {
            stmt.bindLong(1, codeId);
        }
 
        String codeName = entity.getCodeName();
        if (codeName != null) {
            stmt.bindString(2, codeName);
        }
 
        String codeDesc = entity.getCodeDesc();
        if (codeDesc != null) {
            stmt.bindString(3, codeDesc);
        }
 
        String codetype = entity.getCodetype();
        if (codetype != null) {
            stmt.bindString(4, codetype);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(5, createdBy);
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(6, updatedBy);
        }
 
        java.util.Date updatedTime = entity.getUpdatedTime();
        if (updatedTime != null) {
            stmt.bindLong(7, updatedTime.getTime());
        }
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(8, createdTime.getTime());
        }
 
        Boolean isCurrent = entity.getIsCurrent();
        if (isCurrent != null) {
            stmt.bindLong(9, isCurrent ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Code readEntity(Cursor cursor, int offset) {
        Code entity = new Code( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // codeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // codeDesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // codetype
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createdBy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updatedBy
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updatedTime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createdTime
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isCurrent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Code entity, int offset) {
        entity.setCodeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCodeDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCodetype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatedBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdatedBy(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdatedTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setCreatedTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setIsCurrent(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Code entity, long rowId) {
        entity.setCodeId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Code entity) {
        if(entity != null) {
            return entity.getCodeId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
