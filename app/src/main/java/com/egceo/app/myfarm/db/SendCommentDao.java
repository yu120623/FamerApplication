package com.egceo.app.myfarm.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.egceo.app.myfarm.db.SendComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEND_COMMENT".
*/
public class SendCommentDao extends AbstractDao<SendComment, Long> {

    public static final String TABLENAME = "SEND_COMMENT";

    /**
     * Properties of entity SendComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CommentId = new Property(0, Long.class, "commentId", true, "COMMENT_ID");
        public final static Property CommentContent = new Property(1, String.class, "commentContent", false, "COMMENT_CONTENT");
        public final static Property CommnetType = new Property(2, String.class, "commnetType", false, "COMMNET_TYPE");
        public final static Property CommentScore = new Property(3, Float.class, "commentScore", false, "COMMENT_SCORE");
        public final static Property OrderSn = new Property(4, String.class, "orderSn", false, "ORDER_SN");
        public final static Property Commenter = new Property(5, Integer.class, "commenter", false, "COMMENTER");
        public final static Property CommentStatus = new Property(6, String.class, "commentStatus", false, "COMMENT_STATUS");
        public final static Property ReferenceObjectId = new Property(7, Integer.class, "referenceObjectId", false, "REFERENCE_OBJECT_ID");
        public final static Property IsDeleted = new Property(8, String.class, "isDeleted", false, "IS_DELETED");
        public final static Property CreatedBy = new Property(9, String.class, "createdBy", false, "CREATED_BY");
        public final static Property CreatedTime = new Property(10, java.util.Date.class, "createdTime", false, "CREATED_TIME");
        public final static Property UpdatedBy = new Property(11, String.class, "updatedBy", false, "UPDATED_BY");
        public final static Property UpdatedTime = new Property(12, java.util.Date.class, "updatedTime", false, "UPDATED_TIME");
    };


    public SendCommentDao(DaoConfig config) {
        super(config);
    }
    
    public SendCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEND_COMMENT\" (" + //
                "\"COMMENT_ID\" INTEGER PRIMARY KEY ," + // 0: commentId
                "\"COMMENT_CONTENT\" TEXT," + // 1: commentContent
                "\"COMMNET_TYPE\" TEXT," + // 2: commnetType
                "\"COMMENT_SCORE\" REAL," + // 3: commentScore
                "\"ORDER_SN\" TEXT," + // 4: orderSn
                "\"COMMENTER\" INTEGER," + // 5: commenter
                "\"COMMENT_STATUS\" TEXT," + // 6: commentStatus
                "\"REFERENCE_OBJECT_ID\" INTEGER," + // 7: referenceObjectId
                "\"IS_DELETED\" TEXT," + // 8: isDeleted
                "\"CREATED_BY\" TEXT," + // 9: createdBy
                "\"CREATED_TIME\" INTEGER," + // 10: createdTime
                "\"UPDATED_BY\" TEXT," + // 11: updatedBy
                "\"UPDATED_TIME\" INTEGER);"); // 12: updatedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEND_COMMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SendComment entity) {
        stmt.clearBindings();
 
        Long commentId = entity.getCommentId();
        if (commentId != null) {
            stmt.bindLong(1, commentId);
        }
 
        String commentContent = entity.getCommentContent();
        if (commentContent != null) {
            stmt.bindString(2, commentContent);
        }
 
        String commnetType = entity.getCommnetType();
        if (commnetType != null) {
            stmt.bindString(3, commnetType);
        }
 
        Float commentScore = entity.getCommentScore();
        if (commentScore != null) {
            stmt.bindDouble(4, commentScore);
        }
 
        String orderSn = entity.getOrderSn();
        if (orderSn != null) {
            stmt.bindString(5, orderSn);
        }
 
        Integer commenter = entity.getCommenter();
        if (commenter != null) {
            stmt.bindLong(6, commenter);
        }
 
        String commentStatus = entity.getCommentStatus();
        if (commentStatus != null) {
            stmt.bindString(7, commentStatus);
        }
 
        Integer referenceObjectId = entity.getReferenceObjectId();
        if (referenceObjectId != null) {
            stmt.bindLong(8, referenceObjectId);
        }
 
        String isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindString(9, isDeleted);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(10, createdBy);
        }
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(11, createdTime.getTime());
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(12, updatedBy);
        }
 
        java.util.Date updatedTime = entity.getUpdatedTime();
        if (updatedTime != null) {
            stmt.bindLong(13, updatedTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SendComment readEntity(Cursor cursor, int offset) {
        SendComment entity = new SendComment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // commentId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // commentContent
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // commnetType
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // commentScore
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orderSn
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // commenter
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // commentStatus
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // referenceObjectId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isDeleted
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createdBy
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // createdTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // updatedBy
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)) // updatedTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SendComment entity, int offset) {
        entity.setCommentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommentContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCommnetType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommentScore(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setOrderSn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommenter(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCommentStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReferenceObjectId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsDeleted(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedBy(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreatedTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setUpdatedBy(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdatedTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SendComment entity, long rowId) {
        entity.setCommentId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SendComment entity) {
        if(entity != null) {
            return entity.getCommentId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
