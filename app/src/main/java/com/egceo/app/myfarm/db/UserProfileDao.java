package com.egceo.app.myfarm.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.egceo.app.myfarm.entity.UserProfile;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_PROFILE".
*/
public class UserProfileDao extends AbstractDao<UserProfile, String> {

    public static final String TABLENAME = "USER_PROFILE";

    /**
     * Properties of entity UserProfile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserOpenId = new Property(0, String.class, "userOpenId", false, "USER_OPEN_ID");
        public final static Property UserAliasId = new Property(1, String.class, "userAliasId", true, "USER_ALIAS_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserRealName = new Property(3, String.class, "userRealName", false, "USER_REAL_NAME");
        public final static Property UserPassword = new Property(4, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property UserGender = new Property(5, String.class, "userGender", false, "USER_GENDER");
        public final static Property UserPic = new Property(6, String.class, "userPic", false, "USER_PIC");
        public final static Property UserProfession = new Property(7, String.class, "userProfession", false, "USER_PROFESSION");
        public final static Property UserBindingPhone = new Property(8, String.class, "userBindingPhone", false, "USER_BINDING_PHONE");
        public final static Property UserCity = new Property(9, String.class, "userCity", false, "USER_CITY");
        public final static Property UserAddress = new Property(10, String.class, "userAddress", false, "USER_ADDRESS");
        public final static Property UserInviteCodeAssigned = new Property(11, String.class, "userInviteCodeAssigned", false, "USER_INVITE_CODE_ASSIGNED");
        public final static Property UserInviteCodeUsed = new Property(12, String.class, "userInviteCodeUsed", false, "USER_INVITE_CODE_USED");
        public final static Property UserLevel = new Property(13, String.class, "userLevel", false, "USER_LEVEL");
        public final static Property UserStatus = new Property(14, String.class, "userStatus", false, "USER_STATUS");
        public final static Property CreatedBy = new Property(15, String.class, "createdBy", false, "CREATED_BY");
        public final static Property CreatedTime = new Property(16, java.util.Date.class, "createdTime", false, "CREATED_TIME");
        public final static Property UpdatedBy = new Property(17, String.class, "updatedBy", false, "UPDATED_BY");
        public final static Property UpdatedTime = new Property(18, java.util.Date.class, "updatedTime", false, "UPDATED_TIME");
    };


    public UserProfileDao(DaoConfig config) {
        super(config);
    }
    
    public UserProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_PROFILE\" (" + //
                "\"USER_OPEN_ID\" TEXT," + // 0: userOpenId
                "\"USER_ALIAS_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: userAliasId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"USER_REAL_NAME\" TEXT," + // 3: userRealName
                "\"USER_PASSWORD\" TEXT," + // 4: userPassword
                "\"USER_GENDER\" TEXT," + // 5: userGender
                "\"USER_PIC\" TEXT," + // 6: userPic
                "\"USER_PROFESSION\" TEXT," + // 7: userProfession
                "\"USER_BINDING_PHONE\" TEXT," + // 8: userBindingPhone
                "\"USER_CITY\" TEXT," + // 9: userCity
                "\"USER_ADDRESS\" TEXT," + // 10: userAddress
                "\"USER_INVITE_CODE_ASSIGNED\" TEXT," + // 11: userInviteCodeAssigned
                "\"USER_INVITE_CODE_USED\" TEXT," + // 12: userInviteCodeUsed
                "\"USER_LEVEL\" TEXT," + // 13: userLevel
                "\"USER_STATUS\" TEXT," + // 14: userStatus
                "\"CREATED_BY\" TEXT," + // 15: createdBy
                "\"CREATED_TIME\" INTEGER," + // 16: createdTime
                "\"UPDATED_BY\" TEXT," + // 17: updatedBy
                "\"UPDATED_TIME\" INTEGER);"); // 18: updatedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_PROFILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserProfile entity) {
        stmt.clearBindings();
 
        String userOpenId = entity.getUserOpenId();
        if (userOpenId != null) {
            stmt.bindString(1, userOpenId);
        }
 
        String userAliasId = entity.getUserAliasId();
        if (userAliasId != null) {
            stmt.bindString(2, userAliasId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userRealName = entity.getUserRealName();
        if (userRealName != null) {
            stmt.bindString(4, userRealName);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(5, userPassword);
        }
 
        String userGender = entity.getUserGender();
        if (userGender != null) {
            stmt.bindString(6, userGender);
        }
 
        String userPic = entity.getUserPic();
        if (userPic != null) {
            stmt.bindString(7, userPic);
        }
 
        String userProfession = entity.getUserProfession();
        if (userProfession != null) {
            stmt.bindString(8, userProfession);
        }
 
        String userBindingPhone = entity.getUserBindingPhone();
        if (userBindingPhone != null) {
            stmt.bindString(9, userBindingPhone);
        }
 
        String userCity = entity.getUserCity();
        if (userCity != null) {
            stmt.bindString(10, userCity);
        }
 
        String userAddress = entity.getUserAddress();
        if (userAddress != null) {
            stmt.bindString(11, userAddress);
        }
 
        String userInviteCodeAssigned = entity.getUserInviteCodeAssigned();
        if (userInviteCodeAssigned != null) {
            stmt.bindString(12, userInviteCodeAssigned);
        }
 
        String userInviteCodeUsed = entity.getUserInviteCodeUsed();
        if (userInviteCodeUsed != null) {
            stmt.bindString(13, userInviteCodeUsed);
        }
 
        String userLevel = entity.getUserLevel();
        if (userLevel != null) {
            stmt.bindString(14, userLevel);
        }
 
        String userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindString(15, userStatus);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(16, createdBy);
        }
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(17, createdTime.getTime());
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(18, updatedBy);
        }
 
        java.util.Date updatedTime = entity.getUpdatedTime();
        if (updatedTime != null) {
            stmt.bindLong(19, updatedTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public UserProfile readEntity(Cursor cursor, int offset) {
        UserProfile entity = new UserProfile( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userOpenId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userAliasId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userRealName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userPassword
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userGender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userPic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userProfession
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userBindingPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userCity
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userInviteCodeAssigned
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userInviteCodeUsed
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // userLevel
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userStatus
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // createdBy
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // createdTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // updatedBy
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)) // updatedTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserProfile entity, int offset) {
        entity.setUserOpenId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserAliasId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserRealName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserProfession(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserBindingPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserInviteCodeAssigned(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserInviteCodeUsed(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserLevel(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserStatus(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreatedBy(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreatedTime(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setUpdatedBy(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUpdatedTime(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserProfile entity, long rowId) {
        return entity.getUserAliasId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserProfile entity) {
        if(entity != null) {
            return entity.getUserAliasId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
